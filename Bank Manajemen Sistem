//Maura Hellena

#include <iostream>
#include <fstream>
#include <cstring>
#include <iomanip>
#include <map>
#include <vector>
#include <string>
#include <ctime>
#include <list>
#include <stack>
#include <queue>
#include <algorithm>

using namespace std;

// Warna
#define RED "\033[31m"
#define GREEN "\033[32m"
#define RESET "\033[0m"

// Pendaftaran dan Login
class User {
    char username[50];
    char password[50];
    int balance;
    vector<string> transaction_history;
    list<string> recent_logins;
public:
    User() : balance(0) {}
    User(const char* uname, const char* pwd) : balance(0) {
        strcpy(username, uname);
        strcpy(password, pwd);
    }
    const char* getUsername() const { return username; }
    const char* getPassword() const { return password; }
    int getBalance() const { return balance; }
    void setUsername(const char* uname) { strcpy(username, uname); }
    void setPassword(const char* pwd) { strcpy(password, pwd); }
    void deposit(int amount) { balance += amount; addTransaction("Isi Saldo", amount); }
    void withdraw(int amount) { balance -= amount; addTransaction("Penarikan", amount); }
    void transfer(int amount, const char* to_username) { balance -= amount; addTransaction("Transfer kepada " + string(to_username), amount); }
    void addTransaction(const string& type, int amount) {
        time_t now = time(0);
        struct tm *local_time = localtime(&now);
        string transaction_time = to_string(local_time->tm_mday) + "-" + to_string(local_time->tm_mon + 1) + "-" + to_string(local_time->tm_year + 1900) + " " +
                                  to_string(local_time->tm_hour) + ":" + to_string(local_time->tm_min) + ":" + to_string(local_time->tm_sec);
        string transaction = type + ": " + to_string(amount) + " pada " + transaction_time;
        transaction_history.push_back(transaction);
    }
    void addRecentLogin(const string& login_time) {
        recent_logins.push_back(login_time);
        if (recent_logins.size() > 10) { // Simpan hanya 10 login terbaru
            recent_logins.pop_front();
        }
    }
    const vector<string>& getTransactionHistory() const { return transaction_history; }
    const list<string>& getRecentLogins() const { return recent_logins; }
};

// Global variable untuk pendaftaran pengguna
map<string, User> registered_users;

// Prototipe
void load_data();
void save_data();
void user_registration();
bool user_login(string& username);
void display_menu(const string& username);
void deposit(const string& username);
void withdraw(const string& username);
void view_balance(const string& username);
void view_transaction_history(const string& username);
void view_recent_logins(const string& username);
void transfer(const string& username);
void merge(vector<string>& arr, int l, int m, int r);
void mergeSort(vector<string>& arr, int l, int r);
void display_all_users();
void search_user_by_name(const string& partial_name);
void show_user_details(const char* username);

int main() {
    load_data();
    char ch;
    string username;

    do {
        system("CLS");
        cout << "\n\n\t\t\t\t-------------------------------\n";
        cout << "\t\t\t\t     BANK MANAJEMEN SISTEM";
        cout << "\n\t\t\t\t-------------------------------\n";
        cout << "\t\t\t\t        ::MENU UTAMA::\n";
        cout << "\n\t\t\t\t1. REGISTRASI NASABAH BARU";
        cout << "\n\t\t\t\t2. LOGIN NASABAH";
        cout << "\n\t\t\t\t3. LIHAT DAFTAR SEMUA NASABAH";
        cout << "\n\t\t\t\t4. CARI NASABAH BERDASARKAN NAMA";
        cout << "\n\t\t\t\t5. KELUAR";
        cout << "\n\n\t\t\t\t-------------------------------";
        cout << "\n\t\t\t\tPilih Opsi (1-5): ";
        cin >> ch;

        switch (ch) {
            case '1':
                user_registration();
                break;
            case '2':
                if (user_login(username)) {
                    display_menu(username);
                } else {
                    cout << RED << "\n\n\t\t\t\tLogin Tidak Valid!" << RESET;
                    cin.ignore();
                    cin.get();
                }
                break;
            case '3':
                display_all_users();
                break;
            case '4':
                {
                    string partial_name;
                    cout << "\n\n\t\t\t\tMasukkan Sebagian Nama untuk Pencarian: ";
                    cin.ignore();
                    getline(cin, partial_name);
                    search_user_by_name(partial_name);
                }
                break;
            case '5':
                save_data();
                system("CLS");
                cout << GREEN << "\n\n\t\t\t\tBerhasil Keluar." << RESET;
                break;
            default:
                cout << "\a";
        }
        cin.ignore();
        cin.get();
    } while (ch != '5');
    return 0;
}
