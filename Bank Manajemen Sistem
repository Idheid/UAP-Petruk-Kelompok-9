//Maura Hellena

#include <iostream>
#include <fstream>
#include <cstring>
#include <iomanip>
#include <map>
#include <vector>
#include <string>
#include <ctime>
#include <list>
#include <stack>
#include <queue>
#include <algorithm>

using namespace std;

// Warna
#define RED "\033[31m"
#define GREEN "\033[32m"
#define RESET "\033[0m"

// Pendaftaran dan Login
class User {
    char username[50];
    char password[50];
    int balance;
    vector<string> transaction_history;
    list<string> recent_logins;
public:
    User() : balance(0) {}
    User(const char* uname, const char* pwd) : balance(0) {
        strcpy(username, uname);
        strcpy(password, pwd);
    }
    const char* getUsername() const { return username; }
    const char* getPassword() const { return password; }
    int getBalance() const { return balance; }
    void setUsername(const char* uname) { strcpy(username, uname); }
    void setPassword(const char* pwd) { strcpy(password, pwd); }
    void deposit(int amount) { balance += amount; addTransaction("Isi Saldo", amount); }
    void withdraw(int amount) { balance -= amount; addTransaction("Penarikan", amount); }
    void transfer(int amount, const char* to_username) { balance -= amount; addTransaction("Transfer kepada " + string(to_username), amount); }
    void addTransaction(const string& type, int amount) {
        time_t now = time(0);
        struct tm *local_time = localtime(&now);
        string transaction_time = to_string(local_time->tm_mday) + "-" + to_string(local_time->tm_mon + 1) + "-" + to_string(local_time->tm_year + 1900) + " " +
                                  to_string(local_time->tm_hour) + ":" + to_string(local_time->tm_min) + ":" + to_string(local_time->tm_sec);
        string transaction = type + ": " + to_string(amount) + " pada " + transaction_time;
        transaction_history.push_back(transaction);
    }
    void addRecentLogin(const string& login_time) {
        recent_logins.push_back(login_time);
        if (recent_logins.size() > 10) { // Simpan hanya 10 login terbaru
            recent_logins.pop_front();
        }
    }
    const vector<string>& getTransactionHistory() const { return transaction_history; }
    const list<string>& getRecentLogins() const { return recent_logins; }
};

// Global variable untuk pendaftaran pengguna
map<string, User> registered_users;

// Prototipe
void load_data();
void save_data();
void user_registration();
bool user_login(string& username);
void display_menu(const string& username);
void deposit(const string& username);
void withdraw(const string& username);
void view_balance(const string& username);
void view_transaction_history(const string& username);
void view_recent_logins(const string& username);
void transfer(const string& username);
void merge(vector<string>& arr, int l, int m, int r);
void mergeSort(vector<string>& arr, int l, int r);
void display_all_users();
void search_user_by_name(const string& partial_name);
void show_user_details(const char* username);

int main() {
    load_data();
    char ch;
    string username;

    do {
        system("CLS");
        cout << "\n\n\t\t\t\t-------------------------------\n";
        cout << "\t\t\t\t     BANK MANAJEMEN SISTEM";
        cout << "\n\t\t\t\t-------------------------------\n";
        cout << "\t\t\t\t        ::MENU UTAMA::\n";
        cout << "\n\t\t\t\t1. REGISTRASI NASABAH BARU";
        cout << "\n\t\t\t\t2. LOGIN NASABAH";
        cout << "\n\t\t\t\t3. LIHAT DAFTAR SEMUA NASABAH";
        cout << "\n\t\t\t\t4. CARI NASABAH BERDASARKAN NAMA";
        cout << "\n\t\t\t\t5. KELUAR";
        cout << "\n\n\t\t\t\t-------------------------------";
        cout << "\n\t\t\t\tPilih Opsi (1-5): ";
        cin >> ch;

        switch (ch) {
            case '1':
                user_registration();
                break;
            case '2':
                if (user_login(username)) {
                    display_menu(username);
                } else {
                    cout << RED << "\n\n\t\t\t\tLogin Tidak Valid!" << RESET;
                    cin.ignore();
                    cin.get();
                }
                break;
            case '3':
                display_all_users();
                break;
            case '4':
                {
                    string partial_name;
                    cout << "\n\n\t\t\t\tMasukkan Sebagian Nama untuk Pencarian: ";
                    cin.ignore();
                    getline(cin, partial_name);
                    search_user_by_name(partial_name);
                }
                break;
            case '5':
                save_data();
                system("CLS");
                cout << GREEN << "\n\n\t\t\t\tBerhasil Keluar." << RESET;
                break;
            default:
                cout << "\a";
        }
        cin.ignore();
        cin.get();
    } while (ch != '5');
    return 0;
}

//Adrianne Julian Claresta
// Menyimpan Data Tabungan Pengguna di File
void load_data() {
    ifstream infile("user_data.txt");
    if (infile.is_open()) {
        char uname[50], pwd[50];
        string transaction;
        int balance, num_transactions;
        while (infile >> uname >> pwd >> balance >> num_transactions) {
            User user(uname, pwd);
            user.deposit(balance); // Simulating balance addition
            infile.ignore();
            for (int i = 0; i < num_transactions; ++i) {
                getline(infile, transaction);
                size_t pos = transaction.find(": ");
                string type = transaction.substr(0, pos);
                int amount = stoi(transaction.substr(pos + 2));
                user.addTransaction(type, amount);
            }
            registered_users[uname] = user;
        }
        infile.close();
    }
}

// Menyimpan Data Pendaftaran di file
void save_data() {
    ofstream outfile("user_data.txt");
    if (outfile.is_open()) {
        for (const auto& pair : registered_users) {
            const User& user = pair.second;
            outfile << user.getUsername() << " " << user.getPassword() << " " << user.getBalance() << " " << user.getTransactionHistory().size() << endl;
            for (const string& transaction : user.getTransactionHistory()) {
                outfile << transaction << endl;
            }
        }
        outfile.close();
    }
}

// Melakukan Pendaftaran
void user_registration() {
    system("CLS");
    char uname[50], pwd[50];
    cout << "\n\t\t\t\tMasukkan Nama Pengguna: ";
    cin >> uname;
    cout << "\n\t\t\t\tMasukkan Password: ";
    cin >> pwd;

    if (registered_users.find(uname) == registered_users.end()) {
        User newUser(uname, pwd);
        registered_users[uname] = newUser;
        cout << GREEN << "\n\t\t\t\tAnda Berhasil Mendaftar!" << RESET;
    } else {
        cout << RED << "\n\t\t\t\tNama Pengguna Sudah Ada!" << RESET;
    }
}

// Melakukan Login
bool user_login(string& username) {
    system("CLS");
    char uname[50], pwd[50];
    cout << "\n\t\t\t\tMasukkan Nama Pengguna: ";
    cin >> uname;
    cout << "\n\t\t\t\tMasukkan Password: ";
    cin >> pwd;

    if (registered_users.find(uname) != registered_users.end() && strcmp(registered_users[uname].getPassword(), pwd) == 0) {
        username = uname;

        // Menambahkan waktu login terakhir
        time_t now = time(0);
        char* dt = ctime(&now);
        registered_users[uname].addRecentLogin(string(dt));
        
        return true;
    }
    return false;
}

// Layanan Tersedia
void display_menu(const string& username) {
    char ch;
    do {
        system("CLS");
        cout << "\n\n\t\t\t\t-------------------------------\n";
        cout << "\t\t\t\t     BANK MANAJEMEN SISTEM";
        cout << "\n\t\t\t\t-------------------------------\n";
        cout << "\t\t\t\t  ::Layanan yang Tersedia::\n";
        cout << "\n\t\t\t\t1. Isi Saldo";
        cout << "\n\t\t\t\t2. Penarikan";
        cout << "\n\t\t\t\t3. Tampilkan Saldo";
        cout << "\n\t\t\t\t4. Tampilkan Riwayat Transaksi";
        cout << "\n\t\t\t\t5. Tampilkan Riwayat Login Terbaru";
        cout << "\n\t\t\t\t6. Transfer";
        cout << "\n\t\t\t\t7. Logout";
        cout << "\n\n\t\t\t\tPilih Opsi (1-7): ";
        cin >> ch;

        switch (ch) {
            case '1':
                deposit(username);
                break;
            case '2':
                withdraw(username);
                break;
            case '3':
                view_balance(username);
                break;
            case '4':
                view_transaction_history(username);
                break;
            case '5':
                view_recent_logins(username);
                break;
            case '6':
                transfer(username);
                break;
            case '7':
                system("CLS");
                cout << "\n\n\t\t\t\tKembali ke Menu Utama.";
                break;
            default:
                cout << "\a";
        }
        cin.ignore();
        cin.get();
    } while (ch != '7');
}

// Isi Saldo
void deposit(const string& username) {
    system("CLS");
    int amount;
    cout << "\n\t\t\t\tMasukkan Jumlah Pengisian Saldo: ";
    cin >> amount;
    registered_users[username].deposit(amount);
    cout << GREEN << "\n\t\t\t\tPengisian Saldo Berhasil!" << RESET;
}

// Penarikan 
void withdraw(const string& username) {
    char cont;
    do {
        system("CLS");
        int amount;
        char pwd[50];
        cout << "\n\t\t\t\tMasukkan Jumlah Penarikan: ";
        cin >> amount;

        if (amount <= registered_users[username].getBalance()) {
            cout << "\n\t\t\t\tMasukkan Password untuk Konfirmasi: ";
            cin >> pwd;
            if (strcmp(registered_users[username].getPassword(), pwd) == 0) {
                registered_users[username].withdraw(amount);
                cout << GREEN << "\n\t\t\t\tPenarikan Berhasil!" << RESET;
                
                // Konfirmasi untuk transaksi lagi
                cout << "\n\n\t\t\t\tApakah Anda ingin melakukan transaksi lagi? (y/n): ";
                cin >> cont;
                if (cont == 'n') {
                    cont = 'n';
                }
            } else {
                cout << RED << "\n\t\t\t\tPassword Salah!" << RESET;
                cout <<"\n\t\t\t\tCoba Lagi? (y/n): ";
                cin >> cont;
            }
        } else {
            cout << RED << "\n\t\t\t\tSaldo Tidak Cukup!" << RESET;
            cout <<"\n\t\t\t\tCoba Lagi? (y/n): ";
            cin >> cont;
        }
    } while (cont != 'n');
}

// Melihat Jumlah Saldo
void view_balance(const string& username) {
    system("CLS");
    cout << "\n\t\t\t\tSaldo Anda: " << registered_users[username].getBalance();
}

// Fungsi Merge Sort
void merge(vector<string>& arr, int l, int m, int r) {
    int n1 = m - l + 1;
    int n2 = r - m;
    vector<string> L(n1), R(n2);
    for (int i = 0; i < n1; ++i)
        L[i] = arr[l + i];
    for (int j = 0; j < n2; ++j)
        R[j] = arr[m + 1 + j];

    int i = 0, j = 0, k = l;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            ++i;
        } else {
            arr[k] = R[j];
            ++j;
        }
        ++k;
    }
    while (i < n1) {
        arr[k] = L[i];
        ++i;
        ++k;
    }
    while (j < n2) {
        arr[k] = R[j];
        ++j;
        ++k;
    }
}

//Citra Fardiani
void mergeSort(vector<string>& arr, int l, int r) {
    if (l < r) {
        int m = l + (r - l) / 2;
        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);
        merge(arr, l, m, r);
    }
}

// Melihat Riwayat Transaksi
void view_transaction_history(const string& username) {
    system("CLS");
    vector<string> transactions = registered_users[username].getTransactionHistory();
    mergeSort(transactions, 0, transactions.size() - 1);  // Menggunakan mergeSort untuk mengurutkan transaksi
    cout << "\n\n\t\t\t\t----------------------------------------------";
    cout << "\n\t\t\t\t\t    Riwayat Transaksi Anda";
    cout << "\n\t\t\t\t----------------------------------------------\n";
    for (const string& transaction : transactions) {
        cout << "\n\t\t\t\t" << transaction;
    }
}

// Menampilkan Riwayat Login Terbaru
void view_recent_logins(const string& username) {
    system("CLS");
    const list<string>& logins = registered_users[username].getRecentLogins();
    cout << "\n\n\t\t\t\t----------------------------------------------";
    cout << "\n\t\t\t\t\t  Riwayat Login Terbaru Anda";
    cout << "\n\t\t\t\t----------------------------------------------\n";
    for (const string& login : logins) {
        cout << "\n\t\t\t\t" << login;
    }
}

// Transfer ke Pengguna Lain
void transfer(const string& username) {
    char cont;
    do {
        system("CLS");
        char to_user[50];
        int amount;
        char pwd[50]; // Buffer untuk kata sandi
        cout << "\n\t\t\t\tMasukkan Nama Pengguna Tujuan: ";
        cin >> to_user;
        cout << "\n\t\t\t\tMasukkan Jumlah Transfer: ";
        cin >> amount;

        // Memverifikasi kata sandi sebelum melakukan transfer
        cout << "\n\t\t\t\tMasukkan Password untuk Konfirmasi: ";
        cin >> pwd;

        // Jika kata sandi sesuai, lanjutkan dengan transfer
        if (strcmp(registered_users[username].getPassword(), pwd) == 0) {
            if (registered_users.find(to_user) != registered_users.end() && amount <= registered_users[username].getBalance()) {
                registered_users[username].transfer(amount, to_user);
                registered_users[to_user].deposit(amount);
                cout << GREEN << "\n\t\t\t\tTransfer Berhasil!" << RESET;
                cout << "\n\n\t\t\t\t-------------------------------\n";
                cout << "\t\t\t\t        Struk Transaksi";
                cout << "\n\t\t\t\t-------------------------------\n";
                time_t now = time(0);
                struct tm* local_time = localtime(&now);
                char dt[100];
                strftime(dt, sizeof(dt), "%d-%m-%Y %H:%M:%S", local_time);
                cout << "\n\t\t\t\t" << dt;
                cout << "\n\t\t\t\tDari   : " << username;
                cout << "\n\t\t\t\tKepada : " << to_user;
                cout << "\n\t\t\t\tJumlah : " << amount;

                // Konfirmasi untuk transaksi lagi
                cout << "\n\n\t\t\t\tApakah Anda ingin melakukan transaksi lagi? (y/n): ";
                cin >> cont;
                if (cont == 'n') {
                    cont = 'n';
                }
            } else {
                cout << RED << "\n\t\t\t\tNama Pengguna Tujuan Tidak Valid atau Saldo Tidak Cukup!" << RESET;
                cout << "\n\t\t\t\tCoba Lagi? (y/n): ";
                cin >> cont;
            }
        } else {
            cout << RED << "\n\t\t\t\tPassword Salah!" << RESET;
            cout <<"\n\t\t\t\tCoba Lagi? (y/n): ";
            cin >> cont;
        }
    } while (cont != 'n');
}

